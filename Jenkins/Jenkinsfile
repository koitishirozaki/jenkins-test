node {
    switch (env.BRANCH_NAME) {
        case 'builds/Thing':
            checkout scm
            stage('Checkout') {
                withCredentials([gitUsernamePassword(credentialsId: 'koiti-github-pat', gitToolName: 'Default')]) {
                    bat "${env.WORKSPACE}\\Jenkins\\gitsetup.bat"
                    bat 'git fetch'
                    bat 'git checkout builds/Thing'
                    bat 'git pull'
                    bat 'type NUL > log.txt'
                    bat "type NUL > log${env.BUILD_NUMBER}.txt"
                }
            }

            stage('Generate trash files') {
                bat "${env.WORKPSACE}\\Jenkins\\batch\\run.bat"
                bat 'type NUL > fck.txt'
                bat 'type NUL > fck1.txt'
                bat 'type NUL > fck2.txt'
                bat 'type NUL > fck3.txt'
                bat 'type NUL > fck4.txt'
                bat 'type NUL > fck5.txt'
                bat 'type NUL > fck6.txt'
                bat 'type NUL > fck7.txt'
                bat 'type NUL > fck8.txt'
            }

            stage('Overwrite stuff') {
                bat "echo ABACATEEEEEEE${env.BUILD_NUMBER} > Jenkins/DoSoemthing.txt"
            }

            stage('Commit') {
                withCredentials([gitUsernamePassword(credentialsId: 'koiti-github-pat', gitToolName: 'Default')]) {
                    bat 'git add Jenkins/DoSoemthing.txt'
                    bat "${env.WORKSPACE}\\Jenkins\\commit.bat Jenkins/log${env.BUILD_NUMBER}.txt"
                    bat "git tag -a ${env.BUILD_NUMBER} -m ${env.BUILD_NUMBER}"
                    bat "git push origin ${env.BUILD_NUMBER}"
                }
            }

            stage('Cleanup') {
                bat 'git reset --hard'
                bat 'git restore .'
                bat 'git clean -fdx'
            }
            break
    }
}
